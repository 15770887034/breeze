- name: setup elasticcloud operator
  hosts: elasticcloud
  user: root
  vars:
    path: /var/tmp/wise2c/elasticcloud
  tasks:
  - name: copy k8s admin.conf for elasticcloud installation
    copy:
      src: '{{ item.src }}'
      dest: '{{ item.dest }}'
    with_items:
    - { src: '../../kubernetes-playbook/{{ kubernetes_version }}/file/admin.conf', dest: '{{ ansible_env.HOME }}/.kube/config' }
    run_once: true

  - name: setup kubectl certification
    shell: |
      sed -i "s/.*server:.*/    server: https:\/\/{{ kubernetes_endpoint }}/g" $HOME/.kube/config
      chown $(id -u):$(id -g) $HOME/.kube/config
    run_once: ture

  - name: make elasticcloud dir
    file:
      path: '{{ item }}'
      state: directory
      mode: 0755
    with_items:
      - '{{ cpath }}'
      - '{{ path }}'
    run_once: ture

  - name: copy elasticcloud images
    copy:
      src: '{{ item.src }}'
      dest: '{{ item.dest }}'
    with_items:
    - { src: 'file/elasticcloud-images-{{ elastic_cloud_version }}.tar.bz2', dest: '{{ path }}' }
    run_once: true

  - name: copy elasticcloud operator deploy and reset script
    copy:
      src: '{{ item.src }}'
      dest: '{{ item.dest }}'
      mode: 0755
    with_items:
    - { src: 'file/deploy.sh', dest: '{{ path }}' }
    - { src: 'file/remove.sh', dest: '{{ path }}' }
    run_once: true

  - name: load elasticcloud operator images
    docker_image:
      load_path: '{{ path }}/{{ item }}'
      name: elasticcloud
      timeout: 600
    with_items:
    - kube-elasticcloud-images-v{{ kube_elasticcloud_version }}.tar.bz2
    run_once: true

  - name: docker login
    docker_login:
      registry: '{{ registry_endpoint }}'
      username: '{{ registry_user }}'
      password: '{{ registry_password }}'
      reauthorize: true
    run_once: true

  - name: tag images
    docker_image:
      name: '{{ item.repo }}/{{ item.name }}'
      repository: '{{ registry_endpoint }}/{{ registry_project }}/{{ item.name }}'
      tag: '{{ item.tag }}'
    with_items:
    - { repo: '{{ kubernetes_repo }}', name: 'kube-controller-manager', tag: '{{ kubernetes_version }}' }
    - { repo: '{{ kubernetes_repo }}', name: 'kube-apiserver', tag: '{{ kubernetes_version }}' }
    - { repo: '{{ kubernetes_repo }}', name: 'kube-scheduler', tag: '{{ kubernetes_version }}' }
    run_once: true

  - name: push images
    docker_image:
      name: '{{ registry_endpoint }}/{{ registry_project }}/{{ item.name }}'
      tag: '{{ item.tag }}'
      push: true
      state: present
    with_items:
    - { name: 'kube-controller-manager', tag: '{{ kubernetes_version }}' }
    - { name: 'kube-apiserver', tag: '{{ kubernetes_version }}' }
    - { name: 'kube-scheduler', tag: '{{ kubernetes_version }}' }
    - { name: 'kube-proxy', tag: '{{ kubernetes_version }}' }
    run_once: true

  - name: copy elasticcloud yaml files
    template:
      src: '{{ item.src }}'
      dest: '{{ item.dest }}'
    with_items:
      - { src: 'template/eck.yml.j2', dest: '{{ cpath }}/eck.yml' }
      - { src: 'template/elasticsearch.yml.j2', dest: '{{ cpath }}/elasticsearch.yml' }
      - { src: 'template/elasticsearch-service.yml.j2', dest: '{{ cpath }}/elasticsearch-service.yml' }
      - { src: 'template/kibana.yml.j2', dest: '{{ cpath }}/kibana.yml' }
      - { src: 'template/kibana-service.yml.j2', dest: '{{ cpath }}/kibana-service.yml' }
    run_once: ture

  - name: elasticcloud operator deploy
    shell: ./deploy.sh
      kubectl apply -f {{ path }}/eck.yml
      kubectl apply -f {{ path }}/elasticsearch.yml
      kubectl apply -f {{ path }}/kibana.yml
      kubectl apply -f {{ path }}/elasticsearch-service.yml
      kubectl apply -f {{ path }}/kibana-service.yml
    run_once: true

  - name: remove kubectl cert
    file:
      path: '{{ item }}'
      state: absent
    with_items:
      - '{{ ansible_env.HOME }}/.kube/config'
    run_once: ture

  - name: copy clean-images-tags.sh
    copy:
      src: '{{ item.src }}'
      dest: '{{ item.dest }}'
      mode: 0755
    with_items:
    - { src: 'file/clean-images-tags.sh', dest: '{{ path }}' }
    run_once: true

  - name: clean image tag
    shell: ./clean-images-tags.sh
    args:
      chdir: '{{ cpath }}/'
    run_once: ture
